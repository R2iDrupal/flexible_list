<?php

/**
 * @file
 * Defines selection, check box and radio button widgets for text and numeric fields.
 */

use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Entity\Exception\FieldStorageDefinitionUpdateForbiddenException;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\FieldStorageConfigInterface;

/**
 * Implements hook_help().
 */
function flexible_list_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.options':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Flexible List module allows you to create fields where data values are selected from a fixed list of options. Usually these items are entered through a select list, checkboxes, or radio buttons. See the <a href=":field">Field module help</a> and the <a href=":field_ui">Field UI help</a> pages for general information on fields and how to create and manage them.', [':field' => \Drupal::url('help.page', ['name' => 'field']), ':field_ui' => (\Drupal::moduleHandler()->moduleExists('field_ui')) ? \Drupal::url('help.page', ['name' => 'field_ui']) : '#']) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Managing and displaying list fields') . '</dt>';
      $output .= '<dd>' . t('The <em>settings</em> and the <em>display</em> of the list fields can be configured separately. See the <a href=":field_ui">Field UI help</a> for more information on how to manage fields and their display.', [':field_ui' => (\Drupal::moduleHandler()->moduleExists('field_ui')) ? \Drupal::url('help.page', ['name' => 'field_ui']) : '#']) . '</dd>';
      $output .= '<dt>' . t('Defining option keys and labels') . '</dt>';
      $output .= '<dd>' . t('When you define the list options you can define a key and a label for each option in the list. The label will be shown to the users while the key gets stored in the database.') . '</dd>';
      $output .= '<dt>' . t('Choosing list field type') . '</dt>';
      $output .= '<dd>' . t('There are three types of list fields, which store different types of data: <em>float</em>, <em>integer</em> or, <em>text</em>. The <em>float</em> type allows storing approximate decimal values. The <em>integer</em> type allows storing whole numbers, such as years (for example, 2012) or values (for example, 1, 2, 5, 305). The <em>text</em> list field type allows storing text values. No matter which type of list field you choose, you can define whatever labels you wish for data entry.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
/*
function flexible_list_field_widget_info_alter(array &$info) {
  // Allow the options widgets to be used by flexible list fields.
  $info['options_select']['field_types'][] = 'flexible_list_string';
  $info['options_buttons']['field_types'][] = 'flexible_list_string';
}
*/

/**
 * Implements hook_field_formatter_info_alter().
 */
function flexible_list_field_formatter_info_alter(array &$info) {
  // Allow the list formatters to be used by flexible list fields.
  $info['list_default']['field_types'][] = 'flexible_list_string';
  $info['list_key']['field_types'][] = 'flexible_list_string';
}

/**
 * Returns the array of allowed values for a list field.
 *
 * The strings are not safe for output. Keys and values of the array should be
 * sanitized through \Drupal\Core\Field\AllowedTagsXssTrait::fieldFilterXss()
 * before being displayed.
 *
 * @param String $list
 *   Which list of allowed values. Eg. "whitelist", "greylist"
 * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   (optional) The specific entity when this function is called from the
 *   context of a specific field on a specific entity. This allows custom
 *   'allowed_values_function' callbacks to either restrict the values or
 *   customize the labels for particular bundles and entities. NULL when
 *   there is not a specific entity available, such as for Views filters.
 *
 * @return array
 *   The array of allowed values. Keys of the array are the raw stored values
 *   (number or text), values of the array are the display labels.
 *
 * @see callback_allowed_values_function()
 */
function flexible_list_allowed_values(FieldDefinitionInterface $field_definition, FieldableEntityInterface $entity = NULL, $list='all') {
  $allowed_values = &drupal_static(__FUNCTION__, []);
  $allowed_lists = ['whitelist', 'greylist'];

  // If a specific list wasn't asked for, return all of them combined.
  if ($list == 'all') {
    $values = [];
    foreach ($allowed_lists as $allowed_list) {
      $values += flexible_list_allowed_values($field_definition, $entity, $allowed_list);
    }
    return $values;
  }

  $cache_keys = [$list, $field_definition->getTargetEntityTypeId(), $field_definition->getName()];
  if ($entity) {
    $cache_keys[] = 'entity';
  }
  $cache_id = implode(':', $cache_keys);

  if (!isset($allowed_values[$cache_id])) {
    $function = $field_definition->getItemDefinition()->getSetting('allowed_values_' . $list . '_function');
    // If $cacheable is FALSE, then the allowed values are not statically
    // cached. See options_test_dynamic_values_callback() for an example of
    // generating dynamic and uncached values.
    $cacheable = TRUE;
    if (!empty($function)) {
      $values = $function($definition, $field_item, $cacheable);
    }
    else {
      $values = $field_definition->getItemDefinition()->getSetting('allowed_values_' . $list);
    }

    // Make sure we always return an array.
    if (!is_array($values)) {
      $values = [];
    }

    if ($cacheable) {
      $allowed_values[$cache_id] = $values;
    }
    else {
      return $values;
    }
  }

  return $allowed_values[$cache_id];
}

/**
 * Checks if a list of values are being used in actual field values.
 */
function _flexible_list_values_in_use($entity_type, $field_name, $values) {
  if ($values) {
    $result = \Drupal::entityQuery($entity_type)
      ->condition($field_name . '.value', $values, 'IN')
      ->count()
      ->accessCheck(FALSE)
      ->range(0, 1)
      ->execute();
    if ($result) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Checks if a field has any values yet.
 */
function _flexible_list_has_data($entity_type, $field_name) {
  $result = \Drupal::entityQuery($entity_type)
    ->condition($field_name . '.value', NULL, 'IS NOT NULL')
    ->count()
    ->accessCheck(FALSE)
    ->range(0, 1)
    ->execute();
  if ($result) {
    return TRUE;
  }

  return FALSE;
}
